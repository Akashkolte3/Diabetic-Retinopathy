# -*- coding: utf-8 -*-
"""ResNet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I38JlhsnNInRWUg6OZs5SxLD3tnXO_AD
"""

from google.colab import drive
drive.mount('/content/drive')

import os
import pandas as pd
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential, Model
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, Dropout
from tensorflow.keras.applications.resnet50 import ResNet50, preprocess_input

BATCH_SIZE = 32
IMG_SIZE = (224, 224)  # Change the image size to (224, 224) for ResNet50

# Define data directories

train_dir = '/content/drive/MyDrive/Final/train'
test_dir = '/content/drive/MyDrive/Final/test'

train_folders = os.listdir(train_dir)
test_folders = os.listdir(test_dir)

train_subfolders = []
test_subfolders = []

# Find all subfolders in train directory
for folder in train_folders:
    if os.path.isdir(os.path.join(train_dir, folder)):
        train_subfolders.append(os.path.join(train_dir, folder))

# Find all subfolders in test directory
for folder in test_folders:
    if os.path.isdir(os.path.join(test_dir, folder)):
        test_subfolders.append(os.path.join(test_dir, folder))

# Data preprocessing
train_datagen = ImageDataGenerator(
    rescale=1./255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
)

train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=(224, 224),
    batch_size=BATCH_SIZE,
    class_mode='categorical',
    subset='training',
    shuffle=True,
    seed=42,
    # Filter filenames with the text "processed_fusion"
    # Note: Use the actual path to your training directory
    # and the correct text for your filenames
    # If your filenames contain a different text or pattern,
    # you will need to modify this accordingly
    classes=[d for d in os.listdir(train_dir) if 'processed_fusion' in d]
)

test_datagen = ImageDataGenerator(rescale=1./255)

test_generator = test_datagen.flow_from_directory(
    test_dir,
    target_size=(224, 224),
    batch_size=BATCH_SIZE,
    class_mode='categorical',
    shuffle=False,
    seed=42,
    # Filter filenames with the text "processed_fusion"
    # Note: Use the actual path to your test directory
    # and the correct text for your filenames
    # If your filenames contain a different text or pattern,
    # you will need to modify this accordingly
    classes=[d for d in os.listdir(test_dir) if 'processed_fusion' in d]
)

# Load and compile pre-trained ResNet50 model without top layer
base_model = ResNet50(weights='imagenet', include_top=False, input_shape=(IMG_SIZE[0], IMG_SIZE[1], 3))
base_model.trainable = False

# Add global average pooling and output layer to model
x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dense(1024, activation='relu')(x)  # Add a dense layer with 1024 hidden units and ReLU activation
x = Dropout(0.5)(x)  # Add a dropout layer with a rate of 0.5
predictions = Dense(5, activation='softmax')(x)  # Change the number of units and activation function

model = Model(inputs=base_model.input, outputs=predictions)

# Compile the model with categorical crossentropy loss and RMSprop optimizer
model.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])

# Train the model on the training set
history = model.fit(
    train_generator,
    steps_per_epoch=train_generator.samples // BATCH_SIZE,
    epochs=20, # Change number of epochs as needed
    verbose=1
)

# Evaluate the model on the test set
test_loss, test_accuracy = model.evaluate(test_generator)
print(f'Test accuracy: {test_accuracy}')

# Save the model
model.save('diabetic_retinopathy_model.h5')

# Generate predictions on the test set
STEP_SIZE_TEST = test_generator.n // test_generator.batch_size + 1
preds = model.predict_generator(test_generator, steps=STEP_SIZE_TEST, verbose=1)
filenames = test_generator.filenames

# Create a pandas DataFrame to store the results
results = pd.DataFrame({'filename': filenames,
                        'No_DR': preds[:, 0],
                        'moderate': preds[:, 1],
                        'severe': preds[:, 2],
                        'mild': preds[:, 3],
                        'proliferate': preds[:, 4]})