# -*- coding: utf-8 -*-
"""2.0 InceptionV3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AEyI5E51Q-adqJeTldKrz7nJL949U8LT
"""

from google.colab import drive
drive.mount('/content/drive')

import os
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D
from tensorflow.keras.applications.inception_v3 import InceptionV3, preprocess_input

from keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.layers import Dropout
from keras.models import Model
from keras.preprocessing.image import ImageDataGenerator
from keras.applications.inception_v3 import preprocess_input


# Define data generator without data augmentation for validation and test sets
validation_datagen = ImageDataGenerator(preprocessing_function=preprocess_input)
test_datagen = ImageDataGenerator(preprocessing_function=preprocess_input)

# Load and compile pre-trained InceptionV3 model without top layer
IMG_HEIGHT = 299
IMG_WIDTH = 299
base_model = InceptionV3(weights='imagenet', include_top=False, input_shape=(IMG_HEIGHT, IMG_WIDTH, 3))
base_model.trainable = False

# Add global average pooling and output layer to model
model = Sequential([
    base_model,
    GlobalAveragePooling2D(),
    Dense(5, activation='softmax') # Change 5 to the number of classes in your dataset
])

# Compile the model with categorical crossentropy loss and RMSprop optimizer
model.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])

BATCH_SIZE = 32
IMG_SIZE = (299, 299)

# Define data directories
train_data_dir = '/content/drive/MyDrive/Diabetic_1/train'
validation_data_dir = '/content/drive/MyDrive/Diabetic_1/validation'

# Data preprocessing
# Create the test data generator with preprocessing function
test_datagen = ImageDataGenerator(
    rescale=1./255,
    preprocessing_function=preprocess_input
)

# Set the path to the test directory
test_dir = '/content/drive/MyDrive/Diabetic_1/test'

# Create the test data generator
test_generator = test_datagen.flow_from_directory(
    test_dir,
    target_size=(IMG_HEIGHT, IMG_WIDTH),
    batch_size=BATCH_SIZE,
    class_mode='categorical',
    shuffle=False
)

train_datagen = ImageDataGenerator(
    rescale=1./255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    preprocessing_function=preprocess_input
)

validation_datagen = ImageDataGenerator(
    rescale=1./255,
    preprocessing_function=preprocess_input
)

train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=IMG_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='categorical'
)

validation_generator = validation_datagen.flow_from_directory(
    validation_data_dir,
    target_size=IMG_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='categorical'
)

IMG_SHAPE = (299, 299, 3)

# Build the model
model = InceptionV3(input_shape=IMG_SHAPE, include_top=False, weights='imagenet')

for layer in model.layers:
    layer.trainable = False

# Add a global spatial average pooling layer
x = model.output
x = GlobalAveragePooling2D()(x)

# Add a fully connected layer with 512 hidden units and ReLU activation
x = Dense(512, activation='relu')(x)

# Add a dropout layer with a rate of 0.5
x = Dropout(0.5)(x)

# Define the number of classes
num_classes = 2

# Add a final sigmoid layer for classification
predictions = Dense(units=num_classes, activation='softmax')(x)


# Define the complete model
model = Model(inputs=model.input, outputs=predictions)

# Compile the model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])


# Train the model on the training set and validate on the validation set
history = model.fit(
    train_generator,
    steps_per_epoch=train_generator.samples // BATCH_SIZE,
    epochs=10, # Change number of epochs as needed
    validation_data=validation_generator,
    validation_steps=validation_generator.samples // BATCH_SIZE,
    verbose=1
)

# Evaluate the model on the test set
test_loss, test_accuracy = model.evaluate(test_generator)
print(f'Test accuracy: {test_accuracy}')

# Save the model
model.save('diabetic_retinopathy_model.h5')

preds = model.predict_generator(test_generator, steps=STEP_SIZE_TEST, verbose=1)
filenames = test_generator.filenames
results = pd.DataFrame({'filename': filenames, 'predictions': preds.argmax(axis=1)})
results.to_csv('test_results.csv', index=False)

